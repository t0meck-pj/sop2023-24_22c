-------------------------------------------------------------------------------
Napisz program który
1.przedstawi swój numer PID, oraz PPID
2.po wypisaniu, będzie czekał na standardowym wejściu na dane od użytkownika.
3.Uruchom program - nic nie podawaj na wejściu (program powinien czekać 
w nieskończoność).Uruchom nowy terminal. W nim za pomocą komendy kill zamknij 
ten program korzystając z PID wypisanego przez niego na początku.
-------------------------------------------------------------------------------
#include <iostream>
#include <unistd.h>

int main() {
    std::cout << "PID: " << getpid() << std::endl;
    std::cout << "PPID: " << getppid() << std::endl;

    char input;
    std::cin >> input;

    return 0;
}
-------------------------------------------------------------------------------
2.Napisz program, który uruchomi podproces za pomocą komendy fork. Niech proces
rodzica oczekuje na proces potomka. Oba procesy powinny wypisać swój PID oraz PPID.
-------------------------------------------------------------------------------
#include <iostream>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t childPid = fork();

    if (childPid < 0) {
        std::cerr << "Błąd podczas tworzenia procesu potomnego." << std::endl;
        return 1;
    } else if (childPid == 0) {
       
        std::cout << "PID procesu potomnego: " << getpid() << std::endl;
        std::cout << "PPID procesu potomnego: " << getppid() << std::endl;
    } else {
      
        std::cout << "PID procesu rodzica: " << getpid() << std::endl;
        std::cout << "PPID procesu rodzica: " << getppid() << std::endl;

        // Oczekiwanie na zakończenie procesu potomnego
        wait(NULL);
    }

    return 0;
}
-------------------------------------------------------------------------------
3.Napisz program, który będzie pobierał jeden argument z wiersza poleceń i 
będzie obliczał w 2 procesach:
1.Proces rodzica: Wartość sumy liczb od 0 do wartości zadanej jako pierwszy 
argument wykonania programu.
2.Proces potomny: Wypisujący liczby nieparzyste od 1 do wartości zadanej jako 
pierwszy argument wykonania programu.
3.Program powinien wypisać wyniki w kolejności takiej, że najpierw wypisze wynik 
proces potomny, a następnie proces rodzica.
4.Nie korzystaj z komendy sleep. 
-------------------------------------------------------------------------------
#include <iostream>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        std::cerr << "Użycie: " << argv[0] << " <liczba>" << std::endl;
        return 1;
    }

    int n = atoi(argv[1]);

    pid_t childPid = fork();

    if (childPid < 0) {
        std::cerr << "Błąd podczas tworzenia procesu potomnego." << std::endl;
        return 1;
    } else if (childPid == 0) {

        std::cout << "Liczby nieparzyste: ";
        for (int i = 1; i <= n; i += 2) {
            std::cout << i << " ";
        }
        std::cout << std::endl;
    } else {

        wait(NULL);

        int sum = (n * (n + 1)) / 2;
        std::cout << "Suma liczb od 0 do " << n << ": " << sum << std::endl;
    }

    return 0;
}
-------------------------------------------------------------------------------
4.Napisz program, który uruchomi 100 procesów w taki sposób, że każdy kolejny 
potomek stworzy potomka. Niech każdy proces poczeka na zakończenie procesu 
potomka. Możesz korzystać z oczekiwania na wejście lub z komendy sleep i zobacz 
czy drzewko procesów jest takie jak się spodziewasz (możesz w tym celu ograniczyć
liczbę procesów.
1.Czyli drzewo procesów ma wynikowo wyglądać tak: 
główny -> potomek1 -> potomek2 -> ... -> potomek99 -> potomek100
2.Przydatne przy sprawdzaniu: Drzewo procesów można wydrukować poleceniem pstree
-------------------------------------------------------------------------------
#include <iostream>
#include <unistd.h>
#include <sys/wait.h>

const int NUM_PROCESSES = 100;

void createChildProcesses(int depth) {
    if (depth >= NUM_PROCESSES) {
        return;
    }

    pid_t childPid = fork();

    if (childPid < 0) {
        std::cerr << "Błąd podczas tworzenia procesu potomnego." << std::endl;
        exit(1);
    } else if (childPid == 0) {
       
        std::cout << "PID procesu potomnego " << getpid() << ", PPID procesu potomnego " << getppid() << std::endl;
        createChildProcesses(depth + 1);
        exit(0);
    } else {
       
        wait(NULL);
    }
}

int main() {
    std::cout << "PID procesu głównego: " << getpid() << std::endl;

    createChildProcesses(1);

    return 0;
}
-------------------------------------------------------------------------------
5.Napisz program, który uruchomi 100 procesów potomnych w taki sposób, że będzie
jeden rodzic i 100 potomków.
Proces główny niech oczekuje na zakończenie wszystkich procesów potomnych.

Przydatne funkcje: waitpid i wait
-------------------------------------------------------------------------------
#include <iostream>
#include <unistd.h>
#include <sys/wait.h>

const int NUM_CHILDREN = 100;

int main() {
    std::cout << "PID procesu głównego: " << getpid() << std::endl;

    for (int i = 0; i < NUM_CHILDREN; ++i) {
        pid_t childPid = fork();

        if (childPid < 0) {
            std::cerr << "Błąd podczas tworzenia procesu potomnego." << std::endl;
            return 1;
        } else if (childPid == 0) {
       
            std::cout << "PID procesu potomnego " << getpid() << ", PPID procesu potomnego " << getppid() << std::endl;
            return 0;
        }
    }


    for (int i = 0; i < NUM_CHILDREN; ++i) {
        wait(NULL);
    }

    return 0;
}
-------------------------------------------------------------------------------
6.Napisz prosty program chat-u, który będzie korzystał z pliku w katalogu /tmp 
do przekazywania wiadomości. Zastanów się jak to zrobić.
-------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <unistd.h>

const std::string CHAT_FILE = "/tmp/chat.txt";

int main() {
    std::ofstream chatFile;
    chatFile.open(CHAT_FILE);
    chatFile.close();

    pid_t childPid = fork();

    if (childPid < 0) {
        std::cerr << "Błąd podczas tworzenia procesu potomnego." << std::endl;
        return 1;
    } else if (childPid == 0) {
    
        std::ifstream inFile;
        inFile.open(CHAT_FILE);
        std::string message;
        while (true) {
            std::getline(inFile, message);
            if (!message.empty()) {
                std::cout << "Otrzymano wiadomość: " << message << std::endl;
            }
            inFile.clear();
            sleep(1);
        }
        inFile.close();
    } else {
   
        std::string message;
        while (true) {
            std::cout << "Wpisz wiadomość: ";
            std::getline(std::cin, message);
            std::ofstream outFile;
            outFile.open(CHAT_FILE);
            outFile << message << std::endl;
            outFile.close();
            sleep(1);
        }
    }

    return 0;
}
-------------------------------------------------------------------------------
Zadanie Domowe
1.Napisz program, który wygeneruje drzewko procesów wyglądające tak 
(oczywiście procesy nie będą się nazywały A, B, ...):
A \
  |\B \
  |   |\D
  |    \E
   \C \
      |\F
       \G
A jest rodzicem 2 procesów - B oraz C, a te są odpowiednio rodzicami 
D i E, oraz F i G.
-------------------------------------------------------------------------------
#include <iostream>
#include <unistd.h>

int main() {
    std::cout << "Proces A: " << getpid() << std::endl;

    pid_t childPidB = fork();

    if (childPidB < 0) {
        std::cerr << "Błąd podczas tworzenia procesu potomnego B." << std::endl;
        return 1;
    } else if (childPidB == 0) {
        std::cout << "Proces B: " << getpid() << std::endl;

        pid_t childPidD = fork();
        if (childPidD < 0) {
            std::cerr << "Błąd podczas tworzenia procesu potomnego D." << std::endl;
            return 1;
        } else if (childPidD == 0) {
            std::cout << "Proces D: " << getpid() << std::endl;
            return 0;
        } else {
            wait(NULL);
        }

        pid_t childPidE = fork();

        if (childPidE < 0) {
            std::cerr << "Błąd podczas tworzenia procesu potomnego E." << std::endl;
            return 1;
        } else if (childPidE == 0) {
            std::cout << "Proces E: " << getpid() << std::endl;
            return 0;
        } else {
            wait(NULL);
        }

        return 0;
    } else {
        wait(NULL);
    }

    pid_t childPidC = fork();

    if (childPidC < 0) {
        std::cerr << "Błąd podczas tworzenia procesu potomnego C." << std::endl;
        return 1;
    } else if (childPidC == 0) {
        std::cout << "Proces C: " << getpid() << std::endl;

        pid_t childPidF = fork();

        if (childPidF < 0) {
            std::cerr << "Błąd podczas tworzenia procesu potomnego F." << std::endl;
            return 1;
        } else if (childPidF == 0) {
            std::cout << "Proces F: " << getpid() << std::endl;
            return 0;
        } else {
            wait(NULL);
        }

        pid_t childPidG = fork();

        if (childPidG < 0) {
            std::cerr << "Błąd podczas tworzenia procesu potomnego G." << std::endl;
            return 1;
        } else if (childPidG == 0) {
            std::cout << "Proces G: " << getpid() << std::endl;
            return 0;
        } else {
            wait(NULL);
        }

        return 0;
    } else {

        wait(NULL);
    }

    return 0;
}
-------------------------------------------------------------------------------





