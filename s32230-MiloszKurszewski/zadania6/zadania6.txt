Zadania - sygnały
1.Przygotuj prosty programik, który:
-Wypisze na ekranie swój PID

-będzie czekał w pętli nieskończonej do momentu otrzymania sygnału 
użytkownika (SIGUSR1)

-W momencie otrzymania tego sygnału program powinien wypisać na ekranie, że 
dostał sygnał i się zakończyć.
-------------------------------------------------------------------------------
#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <stdlib.h>

void signalHandler(int signal) {
    if (signal == SIGUSR1) {
        printf("Otrzymano sygnał SIGUSR1. Zamykanie programu.\n");
        exit(0);
    }
}

int main() {
    printf("PID: %d\n", getpid());

    signal(SIGUSR1, signalHandler);

    while (1) {
        pause();
    }

    return 0;
}
-------------------------------------------------------------------------------
2.Przygotuj program, który będzie pozwalał na uruchomienie tylko jednej swojej 
instancji. 
Dodatkowo w momencie próby uruchomienia drugiej instancji będzie powiadamiał 
już uruchomiony proces o tym.
Można to zrobić tak:

Program uruchamia się i sprawdza, czy jest plik /tmp/lock

Jeśli taki plik nie istnieje, wtedy:

tworzony jest taki plik. Do niego zapisywany jest PID bieżącego procesu

program instaluje obsługę sygnału USR1, która w momencie otrzymania sygnału 
wypisuje tekst: 
Wyrkyto probe uruchomienia drugiej instancji programu.

program instaluje obsługę sygnału generowanego przez CTRL+C 
(poszukaj jaki to sygnał), która w momencie otrzymania tego sygnału skasuje plik 
/tmp/lock i spowoduje wyjście z pętli nieskończonej (patrz następny punkt)

program wykonuje pętlę nieskończoną zawierającą tylko instrukcję sleep.

Jeśli taki plik istnieje, wtedy:

Wczytywana jest zawartość tego pliku - pid procesu uruchomionego

generowany jest sygnał USR1 do procesu o pid takim jak wczytany

program kończy pracę
-------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>

#define LOCK_FILE "/tmp/lock"

void signalHandler(int signal) {
    if (signal == SIGUSR1) {
        printf("Wykryto próbę uruchomienia drugiej instancji programu.\n");
    } else if (signal == SIGINT) {
        unlink(LOCK_FILE);
        exit(0);
    }
}

int main() {
    int lockFile = open(LOCK_FILE, O_CREAT | O_EXCL | O_WRONLY, 0666);

    if (lockFile != -1) {
        dprintf(lockFile, "%d", getpid());
        close(lockFile);

        signal(SIGUSR1, signalHandler);
        signal(SIGINT, signalHandler);

        while (1) {
            sleep(1);
        }
    } else {
        lockFile = open(LOCK_FILE, O_RDONLY);
        int pid;
        read(lockFile, &pid, sizeof(int));
        close(lockFile);

        kill(pid, SIGUSR1);
    }

    return 0;
}
------------------------------------------------------------------------------- 
